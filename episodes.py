s = """
01_redis7实战教程简介
07:43
02_redis是什么
07:04
03_redis能干嘛-上集
09:30
04_redis能干嘛-中集
11:40
05_redis能干嘛-下集
03:25
06_redis去哪下
05:46
07_redis怎么玩
01:45
08_redis7新特性浅谈
15:15
09_redis安装环境要求和准备
06:28
10_redis安装和坑排除
27:12
11_redis10大类型之总体概述
17:05
12_redis10大类型之命令查阅
02:57
13_redis10大类型之key操作命令
11:21
14_redis10大类型之大小写和帮助命令
02:22
15_redis10大类型之string-上集
14:05
16_redis10大类型之string-下集
13:18
17_redis10大类型之list
14:12
18_redis10大类型之hash
09:21
19_redis10大类型之set
18:47
20_redis10大类型之zset
16:18
21_redis10大类型之bitmap
22:26
22_redis10大类型之HyperLogLog
11:46
23_redis10大类型之GEO
17:53
24_redis10大类型之Stream-上集
16:06
25_redis10大类型之Stream-中集
17:04
26_redis10大类型之Stream-下集
16:12
27_redis10大类型之bitfield
24:47
28_redis持久化之理论介绍
04:48
29_redis持久化之RDB简介
08:58
30_redis持久化之RDB配置说明
06:50
31_redis持久化之RDB自动触发
09:13
32_redis持久化之RDB手动触发
10:49
33_redis持久化之RDB优缺点及数据丢失案例
10:01
34_redis持久化之RDB修复命令简介
02:44
35_redis持久化之RDB触发小结和快照禁用
03:26
36_redis持久化之RDB优化参数
05:36
37_redis持久化之AOF简介
05:22
38_redis持久化之AOF工作流程和写回策略
07:43
39_redis持久化之AOF功能配置开启
12:51
40_redis持久化之AOF正常恢复演示
08:58
41_redis持久化之AOF异常恢复演示
09:44
42_redis持久化之AOF优缺点案例总结
07:06
43_redis持久化之AOF重写机制案例
15:59
44_redis持久化之AOF小总结
02:08
45_redis持久化之RDB+AOF混合持久化
07:46
46_redis持久化之纯缓存模式Only
02:07
47_redis事务之理论简介
11:11
48_redis事务之案例实操
19:45
49_redis管道之理论简介
06:57
50_redis管道之案例实操
05:47
51_redis管道之小总结
04:56
52_redis发布订阅之理论简介
04:04
53_redis发布订阅之命令简介
03:41
54_redis发布订阅之案例实操
08:55
55_redis主从复制之理论简介
12:59
56_redis主从复制之演示架构
07:57
57_redis主从复制之配置细则
09:01
58_redis主从复制之一主二仆
19:18
59_redis主从复制之薪火相传
06:26
60_redis主从复制之反客为主
01:55
61_redis主从复制之工作流程总结
05:33
62_redis主从复制之痛点和改进需求
03:17
63_redis哨兵监控之理论简介
09:24
64_redis哨兵监控之案例实操01
08:01
65_redis哨兵监控之案例实操02
04:40
66_redis哨兵监控之案例实操03
07:59
67_redis哨兵监控之案例实操04
04:18
68_redis哨兵监控之案例实操05
16:21
69_redis哨兵监控之案例实操06
10:08
70_redis哨兵监控之案例实操07
03:15
71_redis哨兵监控之哨兵运行流程
13:10
72_redis哨兵监控之新master选举算法
09:03
73_redis哨兵监控之哨兵使用建议
03:48
74_redis集群分片之集群是什么
06:54
75_redis集群分片之集群能干嘛
04:57
76_redis集群分片之槽位slot
06:27
77_redis集群分片之分片
02:05
78_redis集群分片之分片优势
03:29
79_redis集群分片之哈希取余分区算法
04:06
80_redis集群分片之一致性哈希算法-上集
05:36
81_redis集群分片之一致性哈希算法-下集
03:13
82_redis集群分片之一致性哈希算法优缺点
03:37
83_redis集群分片之哈希槽分区算法
04:23
84_redis集群分片之为什么最大槽数是16384个
05:59
85_redis集群分片之不保证强一致性
02:43
86_redis集群分片之3主3从集群搭建-上集
07:21
87_redis集群分片之3主3从集群搭建-下集
09:34
88_redis集群分片之3主3从集群读写
06:57
89_redis集群分片之主从容错切换
11:27
90_redis集群分片之集群扩容
15:46
91_redis集群分片之集群缩容
08:40
92_redis集群分片之小总结
12:00
93_springboot整合redis之总体概述
08:10
94_springboot整合redis之jedis简介
13:03
95_springboot整合redis之lettuce简介
14:50
96_springboot整合redis之RedisTemplate-上集
18:51
97_springboot整合redis之RedisTemplate-下集
13:56
98_springboot整合redis之连接集群-上集
09:30
99_springboot整合redis之连接集群-下集
11:23
100_redis高级篇之开篇闲聊扯淡
07:37
101_redis高级篇之为什么用单线程
21:36
102_redis高级篇之开始支持多线程和IO多路复用首次浅谈
42:31
103_redis高级篇之开启多线程IO特性支持
06:32
104_redis高级篇之BigKey大厂面试题概览
04:45
105_redis高级篇之BigKey100W记录案例和生产故障
25:44
106_redis高级篇之BigKey发现删除优化策略_1
26:49
107_redis高级篇之缓存双写一致性面试题概览
06:27
108_redis高级篇之缓存双写一致性细则要求
19:20
109_redis高级篇之缓存双写一致性四大策略探讨
42:04
110_redis高级篇之缓存双写一致性工程落地需求和Canal简介
17:12
111_redis高级篇之缓存双写一致性工程Canle落地案例编码
49:23
112_redis高级篇之大数据统计分析面试题概览
18:06
113_redis高级篇之大数据统计UVPVDAU术语行话
12:01
114_redis高级篇之大数据统计去重复思路分析和误差率
12:27
115_redis高级篇之大数据统计HyperLogLog案例
14:35
116_redis高级篇之大数据统计GEO附近的XXX类型面试题
11:48
117_redis高级篇之大数据统计GEO美团app附近的酒店推送案例
21:42
118_redis高级篇之大数据统计Bitmap京东签到送京豆案例
09:53
119_redis高级篇之布隆过滤器面试题简介
04:17
120_redis高级篇之布隆过滤器是什么
34:36
121_redis高级篇之布隆过滤器自研案例和基础代码
51:14
122_redis高级篇之布隆过滤器结合bitmap手写布隆过滤器和小总结
31:11
123_redis高级篇之缓存预热雪崩穿透击穿面试题简介
02:50
124_redis高级篇之缓存预热-雪崩-穿透
25:42
125_redis高级篇之Guava版布隆过滤器案例分析和编码
38:05
126_redis高级篇之缓存击穿是什么及危害
08:50
127_redis高级篇之天猫聚划算需求分析-设计-编码案例
52:29
128_redis高级篇之缓存预热雪崩穿透击穿小总结
03:04
129_redis高级篇之redis分布式锁大厂面试题简介
12:11
130_redis高级篇之redis分布式锁是什么及超卖故障
48:19
131_redis高级篇之redis分布式锁迭代编码01
53:37
132_redis高级篇之redis分布式锁迭代编码02
34:06
133_redis高级篇之redis分布式锁迭代编码03
40:54
134_redis高级篇之redis分布式锁迭代编码04
32:07
135_redis高级篇之redis分布式锁迭代编码05
26:42
136_redis高级篇之redis分布式锁迭代编码06
28:24
137_redis高级篇之redis分布式锁迭代编码07
29:22
138_redis高级篇之redis分布式锁小总结
06:05
139_redis高级篇之RedLock底层Redisson源码深度分析-上
36:34
140_redis高级篇之RedLock底层Redisson源码深度分析-中
37:13
141_redis高级篇之RedLock底层Redisson源码深度分析-下
37:51
142_redis高级篇之缓存淘汰策略大厂面试题简介
06:36
143_redis高级篇之缓存淘汰策略内存查看和打满OOM
20:52
144_redis高级篇之缓存淘汰策略八种策略及使用建议_1
12:09
145_redis高级篇之redis源码分析大厂面试题简介
10:46
146_redis高级篇之redis源码分析src源码包简介
29:28
147_redis高级篇之redis源码分析从dictEntry到RedisObject
11:45
148_redis高级篇之redis源码分析RedisObject内各字段含义
39:19
149_redis高级篇之redis源码分析String类型3大编码介绍_1
10:13
150_redis高级篇之redis源码分析String类型SDS
16:20
151_redis高级篇之redis源码分析String之int-embstr-raw源码分析
21:52
152_redis高级篇之redis源码分析String重要总结
07:14
153_redis高级篇之redis源码分析Hash类型底层结构概述
02:36
154_redis高级篇之redis源码分析Hash类型ziplist和hashtable案例
22:14
155_redis高级篇之redis源码分析Hash类型ziplist结构和zlentry实体解析
33:15
156_redis高级篇之redis源码分析Hash类型listpack取代ziplist
23:18
157_redis高级篇之redis源码分析Hash类型listpack VS ziplist小总结
02:59
158_redis高级篇之redis源码分析List类型总纲介绍
05:53
159_redis高级篇之redis源码分析List类型quicklist底层演变
08:18
160_redis高级篇之redis源码分析List类型quicklist源码分析
08:46
161_redis高级篇之redis源码分析Set类型源码分析
04:32
162_redis高级篇之redis源码分析ZSet类型源码分析
04:40
163_redis高级篇之redis源码分析小总结
04:14
164_redis高级篇之skiplist跳表
22:55
165_redis高级篇之IO多路复用要解决那些问题及学术概念
17:42
166_redis高级篇之IO多路复用redis为什么这么快
09:43
167_redis高级篇之IO多路复用吃米线聊网络场景
08:38
168_redis高级篇之IO多路复用同步异步和阻塞非阻塞
06:02
169_redis高级篇之IO多路复用BIO
40:22
170_redis高级篇之IO多路复用NIO
24:28
171_redis高级篇之IO多路复用IOMultiplexing理论简介
08:51
172_redis高级篇之IO多路复用IOMultiplexing从学术到人话版
07:49
173_redis高级篇之IO多路复用IOMultiplexing能干嘛
08:49
174_redis高级篇之IO多路复用select方法简介
12:15
175_redis高级篇之IO多路复用poll方法简介
05:08
176_redis高级篇之IO多路复用epoll方法简介
11:26
177_redis高级篇之IO多路复用兜底函数方案和系统选择
03:21
178_终章の总结彩蛋
01:05:12"""


def f(s):
    lines = s.split("\n")
    time_str = []
    for line in lines:
        if ":" in line:
            time_str.append(line)
    times = []
    for t in time_str:
        arr = t.split(":")
        if len(arr) == 2:
            minutes, seconds = t.split(":")
            times.append(int(minutes) + int(seconds) / 60)
        else:
            hours, minutes, seconds = t.split(":")
            times.append(int(hours) * 60 + int(minutes) + int(seconds) / 60)
    episode = input("Enter the episode you are on: ")
    print(sum(times[: int(episode)]) / 60)


f(s)
